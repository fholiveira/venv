#!/usr/bin/env python

"""Usage: virtualenv [options] <NAME>

Creates a virtualenv called NAME in current directory.

Options:
  -v, --version           show program's version number and exit
  -h, --help              show this help message and exit
  -v, --verbose           Increase verbosity.
  -q, --quiet             Decrease verbosity.
  -p PYTHON_EXE, --python=PYTHON_EXE
                          The Python interpreter to use, e.g.,
                          --python=python2.5 will use the python2.5 interpreter
                          to create the new environment.  The default is the
                          interpreter that virtualenv was installed with
                          (/usr/bin/python3)
  --clear                 Clear out the non-root install and start from scratch.
  --system-site-packages  Give the virtual environment access to the global
                          site-packages.
  --always-copy           Always copy files rather than symlinking.
  --unzip-setuptools      Unzip Setuptools when installing it.
  --relocatable           Make an EXISTING virtualenv environment relocatable.
                          This fixes up scripts and makes all .pth files
                          relative.
  --no-setuptools         Do not install setuptools (or pip) in the new
                          virtualenv.
  --no-pip                Do not install pip in the new virtualenv.
  --extra-search-dir=DIR  Directory to look for setuptools/pip distributions in.
                          This option can be used multiple times.
  --prompt=PROMPT         Provides an alternative prompt prefix for this
                          environment.
"""
from subprocess import Popen, PIPE
from docopt import docopt
from sys import stdout
from os import path


def bash(comando):
    p = Popen(comando, shell=True, stderr=PIPE)
    while True:
        out = p.stderr.read(1)
        if not out and p.poll() != None:
            break
        if out:
            stdout.write(out)
            stdout.flush()
     

def gerar_comando(argumentos):
    name = argumentos.pop('<NAME>')
    if not name.startswith('.'):
        name = '.' + name

    comando = "virtualenv " + name
    for arg, valor in argumentos.items():
        if isinstance(valor, bool):
            comando = "{0} {1}".format(comando, arg)
        else:
            comando = "{0} {1}={2}".format(comando, arg, valor)
    
    print('Creating virtualenv in ./' + name + ' ...  ', end='')
    bash(comando)
    print("Done.")

    if not path.isfile(name):
        print('Creating environment configuration file ...  ', end='')
        with open('.env', 'w') as arquivo:
            arquivo.write("PYVENV={0}\n".format(name))
        print('Done.')


if __name__ == '__main__':
    argumentos = {arg: valor for arg, valor in  docopt(__doc__, version=1.0).items() if valor}  
    gerar_comando(argumentos)
